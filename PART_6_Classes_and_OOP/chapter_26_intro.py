# 1. В чем сущность ООП в Python?
ans1 = 'ООП предназначено для многократного использования кода - вы производите раложение кода с целью минимизации избыточности ' \
       'и программируете путем настройки того, что уже существует, а не изменяется код на месте или пишете его с нуля'

# 2. Где процедура поиска в иерархии наследования ищет атрибуты?
ans2 = 'В экземпляре, в подклассах и суперклассах, то есть в дереве поиска. Выигрывает самая нижняя версия, которая была найдена первой'

# 3. В чем отличие между объектом класса и объектом экземпляра?
ans3 = 'Класс - фабрика для создания экземпляров'

# 4. Почему первый аргумент в функции метода класса является особым?
ans4 = 'Он всегда получает объект экземпляра, представляющий собой подразумеваемый объект, на котором вызван метод. Называется self'

# 5. Для чего применяется метод __init__?
ans5 = 'Метод вызывается каждый раз, когда создается экземпляр класса с данным методом, если его нет, то экземпляры создаются ' \
       'как пустые пространства имен. Метод известен как метод конструктора, ему неявно передается новый экземпляр, ' \
       'а также любые аргументы, указанные явно с именем класса'

# 6. Как бы вы создали экземпляр класса?
ans6 = 'С помощью обращения к имени класса так, как если бы оно было функцией, аргументы, указанные с именем класса, ' \
       'становятся вторым и последующими аргументами в методе конструктора __init__'

# 7. Как бы вы создали класс?
ans7 = 'С помощью оператора class'

# 8. Как бы вы указали суперклассы класса?
ans8 = 'Перечислить их внутри скобок в оператора class после имени нового класса, ' \
       'при поиске в иерархии наследования первым идут классы, которые левее'