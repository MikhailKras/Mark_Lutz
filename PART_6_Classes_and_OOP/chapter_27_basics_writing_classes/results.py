# 1. Как классы связаны с модулями?
ans1 = 'Оба являются пространствоми имен, классы соответствуют операторам, содержатся в модулях, поддерживают ООП: наследование, ' \
       'перегрузка операций. Модуль похож на класс с единственным экземпляром без наследования, который соответсвует полному файлу кода'

# 2. Каким образом создаются экземпляры и классы?
ans2 = 'Классы через оператор class, экземпляры через обращение к классу, вызов класса (как с функцией)'

# 3. Где и как создаются атрибуты класса?
ans3 = 'Путем выполнения присваивания атрибутам объекта класса. Обычно генерируются присваиванием верхнего уровня, вложенными внутрь ' \
       'class - каждое имя, присвоенное в блоке оператора class, становится атрибутом объекта класса. ' \
       'Тем не менее, атрибуты класса можно создавать путем их присваивания везде, ' \
       'где имеется ссылка на объект класса, даже за пределами оператора class'

# 4. Где и как создаются атрибуты экземпляра?
ans4 = 'В __init__, за пределами класса с ссылкой на объект экземпляра, в любой функции методов класса внутри class'

# 5. Что self означает в классе Python?
ans5 = 'Подразумевает объект экземпляра класса, к которому будет применяться метод или атрибут'

# 6. Каким образом реализовывать перегрузку операций в классе Python?
ans6 = 'Путем создания метода в классе с названием того метода, который нужно перегрузить (магические методы с __ в начале и конце)'

# 7. Когда может понадобиться поддержка перегрузки операций в классах?
ans7 = 'Когда нужно реализовать для своего типа данных метод, отличный от стандартного'

# 8. Какой метод перегрузки операции используется наиболее часто?
ans8 = '__init__'

# 9. Какие две концепции обязательно знать для понимания объектно-ориентированного кода на Python?
ans9 = 'self, __init__'